---
title: "Understanding Functions in R"
subtitle: "NHS-R Community Workshop"
date: "22 February 2024"
author: "Fran Barton"
format:
  revealjs:
    incremental: true
    self-contained: true
    mathjax: null
    theme: "sky"
    logo: "nhs-r-community_logo.svg"
    menu:
      side: "right"
      width: "wide"
    progress: true
    code-overflow: "wrap"
    code-block-height: "650px"
    code-block-border-left: "dodgerblue"
    highlight-style: "arrow"
    knitr:
      opts_chunk:
        echo: true
filters:
  - code_fold.lua
monofont: "Fira Code"
editor_options:
  chunk_output_type: console
---


## Welcome!


### Some intentions for the session:

* I want to get you writing some functions
* I want you to 'get' something about the way a function works
* I want you to feel safe to ask questions and try things out.

## Intended outcome: {.center}

* I hope as a result of today you will be able to write your own
functions, as and when you find them useful.

## Structure

* Writing very simple functions
* What is a function anyway?
* Function arguments
* Using functions to improve repetitive code
* Why are functions useful for analysts?
* Time for questions / chat


## Over to RStudio...

::: {.nonincremental}
* Writing a very (very!) basic function
:::

:::{.callout-note title="R code"}
`01_initial.R`
:::

* Writing some more pretty basic functions
* Playing with arguments
* Variables inside and outside the function

## What is a function anyway?

"An encapsulation of a task"?

![](img/capsule.jpg){fig-alt="An Orion space capsule shown orbiting Earth"}

<small>
[wikimedia commons](https://en.wikipedia.org/wiki/European_Service_Module)
</small>

## One way of thinking about arguments

::::{.columns}
:::{.column}
![](img/scooby_doo.jpg)
:::

:::{.column}
The function, in a way, doesn't need to care about what's under the mask.

Whatever it is, just (try to) do _this_ to it.
:::
::::


## Meet Fenella ...

![](img/guard.jpg){fig-alt="A security guard looking stern" height="250px" width="575px"}

::::{.columns .fragment}
:::{.column}
Fenella's job is to check that the parcel has the right **label** on it.
If it does, she will allow it into the warehouse (function).
:::

:::{.column}
![](img/parcel.jpg){fig-alt="A humble parcel"}
:::
::::


## Fenella's job description

* The labels that Fenella checks against are defined when you create the function
* _Fenella doesn't look inside the box_
* _The contents of the box only get dealt with inside the warehouse (function)_
* What happens if you try to bring a parcel in that has an unexpected label?
* What happens if you don't supply a box for one of the expected labels?


## To the code again...

::::{.fragment}
:::{.callout-note title="R code"}
`02_arguments.R`
:::
::::

## The carrier bag theory of function(s)

::::{.columns}
:::{.column}
"An encapsulation of a task"? A carrier bag?

![](img/carrier.jpg){fig-alt="A Poundland carrier bag and a seagull"}

<small>
[Ben Sutherland](https://www.flickr.com/photos/bensutherland/7400428126/)
</small>

:::

:::{.column .fragment}
* A function can contain a lot of tasks
* A function can just do one task
* How big you make your functions is a matter for you ðŸ˜Š
:::
::::


## Put it in the bag

If you have code that looks like this:

:::{.fragment}

```{r carrier1}
#| eval: false

source("data_input1.R")
source("data_input2.R")
data3 <- read.csv("more_data.csv")
data_out <- rbind(data1, data2, data3)

...

```

:::

:::{.fragment}
... you might want to put it all in a function

```{r carrier2}
#| eval: false

get_data <- function() {
  source("data_input1.R")
  source("data_input2.R")
  data3 <- read.csv("more_data.csv")
  rbind(data1, data2, data3)
}

data_out <- get_data()

```
:::

## Using functions to tame repetitive code

"If you find yourself writing the same thing more than twice, turn it into a
function."

:::{.fragment}
To which I would add,

"If you find yourself using a function in more than one project, add it to a
package."
:::


## An example (1) {.smaller}

```{r sw1}
#| echo: true

library(dplyr)

starwars

```


## An example (2) {.smaller}

:::{.fragment}
```{r sw2}

droids_mean_height <- starwars |>
  filter(species == "Droid") |>
  summarise(droid_mean_height = mean(height, na.rm = TRUE))

droids_mean_height
```
:::

:::{.fragment}
```{r sw3}

ewoks_mean_height <- starwars |>
  filter(species == "Ewok") |>
  summarise(droid_mean_height = mean(height, na.rm = TRUE))

ewoks_mean_height
```
:::

## Try again... {.smaller}


```{r sw4}

droids_mean_height <- starwars |>
  filter(species == "Droid") |>
  summarise(droid_mean_height = mean(height, na.rm = TRUE))

droids_mean_height

ewoks_mean_height <- starwars |>
  filter(species == "Ewok") |>
  summarise(ewok_mean_height = mean(height, na.rm = TRUE))

ewoks_mean_height

```


## Convert common code to a function (1)

```{r sw5, filename="Original code"}

droids_mean_height <- starwars |>
  filter(species == "Droid") |>
  summarise(droid_mean_height = mean(height, na.rm = TRUE))

```

:::{.fragment}
First steps: name it and wrap it

```{r sw6, filename="Name it and wrap it"}

get_species_mean_height <- function() {
  starwars |>
    filter(species == "Droid") |>
    summarise(droid_mean_height = mean(height, na.rm = TRUE))
}

```
:::

:::{.fragment}
Note that we don't need to worry about the _output_ will be called (if
anything).
The user of the function will decide that when they run it.
:::


## Back to RStudio...

::::{.fragment}
:::{.callout-note title="R code"}
`03_refactoring.R`
:::
::::

## Advantages of refactoring to a function

* You can spot efficiencies
* You can be very clear what the inputs and outputs ought to be
* You might be able to pass it to `lapply()` or `purrr::map()`, if useful.


## Getting functions to 'click'


::::{.columns}
:::{.column}
I remember it taking me a while, when I first tried understanding functions, for
them to 'click' for me.

I didn't understand the difference between variables inside the function
and outside it.
I didn't really get what the _point_ was.
:::

:::{.column}
![](img/lego.png){fig-alt="Three coloured LEGO (TM) blocks"}

<small>
[pngall](https://www.pngall.com/lego-png/download/53075)
</small>
:::
::::

## Getting functions to 'click'

::::{.columns}
:::{.column}

![](img/lego.png){fig-alt="Three coloured LEGO (TM) blocks"}

<small>
[pngall](https://www.pngall.com/lego-png/download/53075)
</small>
:::

:::{.column}
I didn't realise the power of the _abstraction_ of using variables (as
function arguments), instead of just passing in values.

Eventually I realised that this means your code can work harder for you.
It can do its thing in different situations, and work with different inputs.
:::
::::

## Why are functions useful?

To quote Hadley Wickham & co.:

:::{.callout-tip title="R for Data Science, Functions section"}
<blockquote>
1. You can give a function an evocative name that makes your code easier to understand.
2. As requirements change, you only need to update code in one place, instead of many.
3. You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).
4. It makes it easier to reuse work from project-to-project, increasing your productivity over time.
</blockquote>
:::

:::{.fragment}
[R for Data Science](https://r4ds.hadley.nz/functions){preview-link="true"}
:::



## How can functions help us do our jobs well?

::::{.columns}
:::{.column}
![](img/r4ds_quote.png)
:::

:::{.column}
1. Naming
2. Efficiency
3. Accuracy
4. Transferability
:::
::::


## Useful resources

* "Functions" in the [R for Data Science book](https://r4ds.hadley.nz/functions)
* Recommendations on naming functions in [Tidy design principles](https://design.tidyverse.org/function-names.html)

:::{.fragment}
And a special (off-topic... or is it?) shout-out to

* _[The Carrier Bag Theory of Fiction](https://theanarchistlibrary.org/mirror/u/uk/ursula-k-le-guin-the-carrier-bag-theory-of-fiction.pdf)_ (1986) by Ursula Le Guin
:::


## Some things we haven't covered

* Pros and cons of writing longer or shorter functions
* Checking function arguments
* Passing functions to other functions eg `purrr::map()`
* Using anonymous (one-off) functions in `dplyr::mutate()`, for example
* Writing tests for functions
* Creating an R package


## Thanks for attending!
